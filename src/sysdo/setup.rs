use color_eyre::Result;
use color_eyre::eyre::bail;
use log::debug;
use log::info;
use log::error;
use std::fs;
use std::path::PathBuf;
use std::path::Path;
use directories::BaseDirs;
use std::process::Command;
use jiff::{Zoned, Unit};
use std::env;
use std::os::unix::fs::PermissionsExt;
use crate::settings::Settings;
use crate::run::run;

const CONFIG_DIRS_TO_MAKE: [(&str, u32); 1] = [("sops/age", 0o700) ];
const SSH_KEY_TYPE: &str = "ed25519";

fn gen_key(keyfile: &Path, command: &str, args: Option<&[&str]>) -> Result<()> {
	if keyfile.is_file() {
		debug!("Key exists ({})", keyfile.display());
		return Ok(())
	}
	debug!("Generating key with '{}'", command);
	let _ = run(command, args)?;
    Ok(())
}

fn path_to_str(p: &Path) -> &str {
	p.as_os_str().to_str().unwrap()
}

fn gen_ssh_key(keyfile: &Path, username: &str, hostname: &str) -> Result<()> {
	let timestamp = Zoned::now().round(Unit::Second)?;
	let comment = format!("Generated by {}@{} on {}", username, hostname, timestamp);
	gen_key(keyfile, "ssh-keygen", Some(&["-t", SSH_KEY_TYPE, "-C", &comment, "-f", path_to_str(keyfile), "-N", ""]))?;
    Ok(())
}

fn gen_age_key_from_ssh_key(age_key_file: &Path, ssh_key_file: &Path) -> Result<()> {
	debug!("{} -> {}", ssh_key_file.display(), age_key_file.display());
	gen_key(age_key_file, "ssh-to-age", Some(&["-private-key", "-i", path_to_str(ssh_key_file), "-o", path_to_str(age_key_file)]));
	Ok(())
}

pub fn setup(settings: &Settings) -> Result<()> {
    for (s, permissions) in CONFIG_DIRS_TO_MAKE.iter() {
    	let dir = settings.config_dir.join(s);
    	debug!("Creating dir {}", &dir.display());
    	fs::create_dir_all(&dir)?;
    	fs::set_permissions(dir, fs::Permissions::from_mode(*permissions))?;
    }

    let keyname = format!("id_{}_{}", SSH_KEY_TYPE, settings.hostname);
    let ssh_key_file = settings.home_dir.join(".ssh").join(&keyname);
    gen_ssh_key(&ssh_key_file, &settings.username, &settings.hostname)?;

    let age_key_file = settings.home_dir.join(".config/sops/age/keys.txt");
    gen_age_key_from_ssh_key(&age_key_file, &ssh_key_file)?;

    Ok(())
}
